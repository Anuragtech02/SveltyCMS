# .github/workflows/auto-release.yaml
# This workflow uses semantic-release to automatically publish new versions of your package to GitHub based on commit messages.
name: Semantic Release

# Triggers the workflow ONLY when a push happens to the main or next branch.
on:
  push:
    branches: [main] # Only release from protected main branch
  workflow_dispatch: {} # Allow manual release if needed

permissions:
  contents: write # Allow changelog + tags
  issues: write # Allow release notes on issues
  pull-requests: write # Comment on PRs for releases

jobs:
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '24'
          check-latest: true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Playwright tests
        run: bunx playwright test

  release:
    name: Release with Semantic Release # Auto version + changelog
    runs-on: ubuntu-latest
    needs: [test] # Only release if tests pass

    steps:
      # Get git code
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # fetch-depth: 0 is required for semantic-release to analyze the full commit history.
          fetch-depth: 0

      # Setup Node.js for semantic-release
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '24'
          check-latest: true

      # Setup Bun environment
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # Cache Bun dependencies
      - name: Cache Bun dependencies
        id: bun-cache
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # Install only what's needed for release
      - name: Install dependencies
        run: bun install --frozen-lockfile

      # This step is specific to your main branch cleanup requirement.
      - name: Ensure /config/collections is empty in main
        # This only runs on the main branch.
        if: github.ref == 'refs/heads/main'
        run: |
          # If the collections directory exists, remove it.
          if [ -d "config/collections" ]; then
            echo "Removing config/collections to maintain a clean main branch..."
            git rm -r --cached config/collections
            rm -rf config/collections
            
            # Commit the changes if any files were removed.
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            # The '|| true' ensures the workflow doesn't fail if there's nothing to commit.
            git commit -m "chore(build): auto-remove collections directory for release" || true
            git push origin main
            echo "Collections directory removed and changes pushed."
          else
            echo "No collections directory found â€” main is already clean."
          fi

      - name: Run semantic-release
        run: bunx semantic-release
        env:
          # The GITHUB_TOKEN is automatically provided by GitHub Actions.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NPM_TOKEN: ${{ secrets.NPM_TOKEN }} # Uncomment if you decide to publish to npm.
